{"version":3,"sources":["components/UI/Card.js","components/UI/LoadingIndicator.js","components/Ingredients/IngredientForm.js","components/Ingredients/IngredientList.js","components/UI/ErrorModal.js","components/Ingredients/Search.js","components/Ingredients/Ingredients.js","App.js","index.js"],"names":["Card","props","className","children","LoadingIndicator","IngredientForm","React","memo","useState","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","onSubmit","event","preventDefault","onAddIngredient","title","amount","htmlFor","type","id","value","onChange","target","loading","IngredientList","ingredients","map","ig","key","onClick","onRemoveItem","bind","ErrorModal","Fragment","onClose","Search","onLoadIngredients","enteredFilter","setEnteredFilter","inputRef","useRef","useEffect","timer","setTimeout","current","query","length","fetch","then","response","json","responseData","loadedIngredients","push","clearTimeout","ref","Ingredients","userIngredients","setUserIngredients","isLoading","setIsLoading","error","setError","console","log","filteredIngredientsHandler","useCallback","filteredIngredients","ingredient","method","body","JSON","stringify","headers","prevIngredients","name","ingredientId","filter","catch","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d76f782.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return <div className=\"card\">{props.children}</div>;\n};\n\nexport default Card;\n","import React from 'react';\n\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => (\n  <div className=\"lds-ring\">\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default LoadingIndicator;\n","import React, { useState } from 'react';\n\nimport Card from '../UI/Card';\nimport LoadingIndicator from '../UI/LoadingIndicator';\nimport './IngredientForm.css';\n\nconst IngredientForm = React.memo(props => {\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAddIngredient({ title: enteredTitle, amount: enteredAmount });\n  };\n\n  return (\n    <section className=\"ingredient-form\">\n      <Card>\n        <form onSubmit={submitHandler}>\n          <div className=\"form-control\">\n            <label htmlFor=\"title\">Name</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              value={enteredTitle}\n              onChange={event => {\n                setEnteredTitle(event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"form-control\">\n            <label htmlFor=\"amount\">Amount</label>\n            <input\n              type=\"number\"\n              id=\"amount\"\n              value={enteredAmount}\n              onChange={event => {\n                setEnteredAmount(event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"ingredient-form__actions\">\n            <button type=\"submit\">Add Ingredient</button>\n            {props.loading && <LoadingIndicator />}\n          </div>\n        </form>\n      </Card>\n    </section>\n  );\n});\n\nexport default IngredientForm;\n","import React from 'react';\n\nimport './IngredientList.css';\n\nconst IngredientList = props => {\n  return (\n    <section className=\"ingredient-list\">\n      <h2>Loaded Ingredients</h2>\n      <ul>\n        {props.ingredients.map(ig => (\n          <li key={ig.id} onClick={props.onRemoveItem.bind(this, ig.id)}>\n            <span>{ig.title}</span>\n            <span>{ig.amount}x</span>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default IngredientList;\n","import React from 'react';\n\nimport './ErrorModal.css';\n\nconst ErrorModal = React.memo(props => {\n  return (\n    <React.Fragment>\n      <div className=\"backdrop\" onClick={props.onClose} />\n      <div className=\"error-modal\">\n        <h2>An Error Occurred!</h2>\n        <p>{props.children}</p>\n        <div className=\"error-modal__actions\">\n          <button type=\"button\" onClick={props.onClose}>\n            Okay\n          </button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n});\n\nexport default ErrorModal;\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport Card from '../UI/Card';\nimport './Search.css';\n\nconst Search = React.memo(props => {\n  const { onLoadIngredients } = props;\n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (enteredFilter === inputRef.current.value) {\n        const query =\n          enteredFilter.length === 0\n            ? ''\n            : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`;\n        fetch(\n          'https://react-hooks-7fef3.firebaseio.com/ingredients.json' + query\n        )\n          .then(response => response.json())\n          .then(responseData => {\n            const loadedIngredients = [];\n            for (const key in responseData) {\n              loadedIngredients.push({\n                id: key,\n                title: responseData[key].title,\n                amount: responseData[key].amount\n              });\n            }\n            onLoadIngredients(loadedIngredients);\n          });\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [enteredFilter, onLoadIngredients, inputRef]);\n\n  return (\n    <section className=\"search\">\n      <Card>\n        <div className=\"search-input\">\n          <label>Filter by Title</label>\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={enteredFilter}\n            onChange={event => setEnteredFilter(event.target.value)}\n          />\n        </div>\n      </Card>\n    </section>\n  );\n});\n\nexport default Search;\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport IngredientForm from './IngredientForm';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal';\nimport Search from './Search';\n\nconst Ingredients = () => {\n  const [userIngredients, setUserIngredients] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    console.log('RENDERING INGREDIENTS', userIngredients);\n  }, [userIngredients]);\n\n  const filteredIngredientsHandler = useCallback(filteredIngredients => {\n    setUserIngredients(filteredIngredients);\n  }, []);\n\n  const addIngredientHandler = ingredient => {\n    setIsLoading(true);\n    fetch('https://react-hooks-7fef3.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(ingredient),\n      headers: { 'Content-Type': 'application/json' }\n    })\n      .then(response => {\n        setIsLoading(false);\n        return response.json();\n      })\n      .then(responseData => {\n        setUserIngredients(prevIngredients => [\n          ...prevIngredients,\n          { id: responseData.name, ...ingredient }\n        ]);\n      });\n  };\n\n  const removeIngredientHandler = ingredientId => {\n    setIsLoading(true);\n    fetch(\n      `https://react-hooks-7fef3.firebaseio.com/ingredients/${ingredientId}.json`,\n      {\n        method: 'DELETE'\n      }\n    ).then(response => {\n      setIsLoading(false);\n      setUserIngredients(prevIngredients =>\n        prevIngredients.filter(ingredient => ingredient.id !== ingredientId)\n      );\n    }).catch(error => {\n      setError('Something went wrong!');\n      setIsLoading(false);\n    });\n  };\n\n  const clearError = () => {\n    setError(null);\n  }\n\n  return (\n    <div className=\"App\">\n      {error && <ErrorModal onClose={clearError}>{error}</ErrorModal>}\n\n      <IngredientForm\n        onAddIngredient={addIngredientHandler}\n        loading={isLoading}\n      />\n\n      <section>\n        <Search onLoadIngredients={filteredIngredientsHandler} />\n        <IngredientList\n          ingredients={userIngredients}\n          onRemoveItem={removeIngredientHandler}\n        />\n      </section>\n    </div>\n  );\n};\n\nexport default Ingredients;\n","import React from 'react';\n\nimport Ingredients from './components/Ingredients/Ingredients';\n\nconst App = props => {\n  return <Ingredients />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}